# -*- coding: utf-8 -*-
"""Hotel Booking Analysis - Solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16JEe1I8YgLE3Q5vjcvU7HgUpAA8GWuvY

## <b> Have you ever wondered when the best time of year to book a hotel room is? Or the optimal length of stay in order to get the best daily rate? What if you wanted to predict whether or not a hotel was likely to receive a disproportionately high number of special requests? This hotel booking dataset can help you explore those questions!

## <b>This data set contains booking information for a city hotel and a resort hotel, and includes information such as when the booking was made, length of stay, the number of adults, children, and/or babies, and the number of available parking spaces, among other things. All personally identifying information has been removed from the data. </b>

## <b> Explore and analyze the data to discover important factors that govern the bookings. </b>

# Importing all the necessary prerequisites
"""

!pip install sort-dataframeby-monthorweek
!pip install sorted-months-weekdays

from google.colab import drive                                                  # for mounting the dataset   
import numpy as np                                                              # for processing single-dimensional data centric operations
import pandas as pd                                                             # for processing multi-dimensional data centric operations
import matplotlib.pyplot as plt                                                 # for plotting/data visualization
import matplotlib.style                                                         # for customizing sheet color
import matplotlib.ticker as mtick                                               # for setting a tick for every integer value 
import seaborn as sns                                                           # for a more "graphical approach" towards plotting the data
import missingno as msno                                                        # for plotting null values 
import folium                                                                   # for visualizing the data in geospatial format   
from folium.plugins import HeatMap                                              # for plotting the data in the form of heat visuals
import plotly.express as px                                                     # for visualizing variety of data in different formats
import warnings                                                                 # for ignoring any warning interuptions that can disrupt the flow of code  
import random                                                                   # for randomly picking background style
import sort_dataframeby_monthorweek as sd                                       # for sorting dataframe by month

"""# Reading the Dataset"""

drive.mount('/content/drive')
df_path = '/content/drive/My Drive/Colab Notebooks/Module 1/Capstone Project - (Hotel Booking Analysis - Sayesh Ankaram)/'
data = pd.read_csv(df_path + 'Hotel Bookings Dataset.csv', index_col=False)

data.head()

data.tail()

"""# Customizing the Warnings and Data Visualization for effective computing

"""

# Commented out IPython magic to ensure Python compatibility.
# altering the flow of code by suppressing graph-plot warnings and selecting random background style for the graphs
warnings.filterwarnings(action='ignore')
style_types = plt.style.available
for i in random.sample(style_types, len(style_types)):
  plt.style.use(i)
# %matplotlib inline

"""# Getting an overview / Exploring the dataset """

# getting total number of rows and columns present in the dataset
data.shape

# surveying the dataset
data.info(verbose=True)

# getting an overall quantitative report of the dataset
data.describe().T

"""# Creating an instance of the original dataset"""

# finally, creating an instance of the dataset in order to keep the original dataset safe and secure
df = data.copy()

"""# Data Processing

**1. Handling Null values.**
"""

# checking Null values
df.isna().sum().sort_values(ascending=False)[:7]

# replacing Null values of 'country' with the most frequently occured value using mode
df['country'].fillna(data.country.mode().to_string(), inplace=True)

# checking Null values in the updated dataset and creating a dataframe from all these Null values
null_df = pd.DataFrame({'Null values': df.isna().sum().sort_values(ascending=False)[:7], 'Null value Percentage': ((df.isna().sum().sort_values(ascending=False)[:7]) / (df.shape[0]) * 100)}) 
null_df

# plotting Null values using missingno.bar 
msno.bar(df, figsize=(20, 7), fontsize=10, color='black')
plt.ylabel('Data completeness')
plt.show()

"""**2. Dropping unwanted rows.**"""

# filling Null values of Discrete variable 'children' with 0
df['children'].fillna(0, inplace=True)

# obtaining the data of unwanted rows where Discrete variables like 'adults', 'children' and 'babies' are 0
df[(df['adults'] + df['children'] + df['babies']) == 0].shape

# dropping the 180 rows of unwanted Discrete variables 
df.drop(df[(df['adults'] + df['children'] + df['babies']) == 0].index, inplace=True)

"""**3. Changing the datatypes.**"""

# obtaining the dtype of all the columns
df.dtypes

# converting the Null values of Discrete variables 'children', 'agent' and 'company' to 0
df[['children', 'agent', 'company']].fillna(0, inplace=True)

# converting the dtypes of columns such as 'children', 'agent' and 'company' because they're supposed to be in int64 but they're in float64 instead
df[['children', 'agent', 'company']] = df[['children', 'agent', 'company']].astype('Int64')

"""**4. Dropping unwanted columns.**"""

df.drop(columns=['agent', 'company'], inplace=True)

"""**5. Creating Categorical Dataframe.**"""

# creating a categorical df by adding columns whose dtype='str'
cat_col = [col for col in df.columns if df[col].dtype == 'O']
cat_df = df[cat_col]
cat_df.head(5).T

"""**6. Performing Feature Engineering in the Categorical dataframe.**

*   **Bifurcating 'reservation_status_date' column into year, month & date**
"""

# dividing 'reservation_status_date' column into year, month & date
cat_df['reservation_status_date'] = pd.to_datetime(cat_df['reservation_status_date'])

cat_df['year'] = cat_df['reservation_status_date'].dt.year
cat_df['month'] = cat_df['reservation_status_date'].dt.month
cat_df['day'] = cat_df['reservation_status_date'].dt.day

cat_df[['year', 'month', 'day']].reset_index().head()
cat_df.drop(columns=['year', 'month', 'day'], axis=1, inplace=True)

"""
*   **Dropping the unwanted column 'reservation_status_date' & 'arrival_date_month'.**"""

# dropping the two unwanted columns because the day, month, year has been reformatted so there's no need of 'reservation_status_date' & 'arrival_date_month'
cat_df.drop(columns=['reservation_status_date', 'arrival_date_month'], axis=1, inplace=True)

"""*   **Obtaining Unique values of each Categorical Column.**"""

# iterating through each categorical column and getting unique values 
for col in cat_df.columns:
  print(f'{col} Unique Values: \n {df[col].unique()} \n')

"""*   **Obtaining Unique value Count of each Categorical Column.**"""

# iterating through each categorical column and getting unique value Counts
for col in cat_df.columns:
  print(f'{col} Unique Val Count: \n {df[col].value_counts()} \n')

"""*   **Obtaining deep insights of Categorical Data.**"""

# iterating through each categorical column and getting basic observations in terms of percentages
for col in cat_df.columns:
  print(f'{col} Unique Value Count: \n {df[col].value_counts(normalize=True)} \n')

"""# Exploratory Data Analysis (EDA)

# **Question 1:** Which Country has the most number of Visitors?
"""

# taking the 0 cancellations from 'is_canceled' column for obtaining countries with most no. of guests and creating a data frame with it
country_with_max_guests = df[df['is_canceled'] == 0]['country'].value_counts().sort_values(ascending=False).reset_index()
country_with_max_guests.columns = ['Country', 'Guests']
country_with_max_guests

# plotting the countries with most number of visitors using plotly.chloropeth
map = folium.Map()
max_guest_country_map = px.choropleth(country_with_max_guests, title='Countries with most number of visitors', locations=country_with_max_guests['Country'], color=country_with_max_guests['Guests'], hover_name=country_with_max_guests['Country'], labels={'Guests': 'Guest Count'})
max_guest_country_map.show()

"""# **Conclusion:** Based on the above data we can conclude that, Countries with the most number of Guests are Portugal (Guest Count: 20977) followed by Great Britain (Guest Count: 9668) and France (Guest Count: 8468) and so on.

# **Question 2:** Which Country has the least number of Visitors?
"""

# taking the 0 cancellations from 'is_canceled' column for obtaining countries with least no. of guests and creating a data frame with it
country_with_min_guests = df[df['is_canceled'] == 0]['country'].value_counts().sort_values(ascending=True).reset_index()
country_with_min_guests.columns = ['Country', 'Guests']
country_with_min_guests

# plotting countries with least number of visitors using plotly.scatter_geo 
map = px.scatter_geo(country_with_min_guests, title='Countries with the least number of visitors', locations=country_with_min_guests['Country'], color=country_with_min_guests['Guests'], size=country_with_min_guests['Guests'], labels={'Guests':'Guest Count'})
map.show()

"""# **Conclusion:** Based on the above data we can conclude that, there are about 30 Countries with Guest Count: 1, 10 Countries with Guest Count: 2, 7 Countries with Guest Count: 3 and so on.

# **Question 3:** What is the Percentage of Bookings that were both, confirmed and cancelled?
"""

# creating a function that takes values of column 'is_canceled' and returns unique values and the percentage of the count of those unique values 
def get_count(series):
  val_count = series.value_counts()
  unq = val_count.index
  perc = (val_count/val_count.sum()) * 100
  return unq.values, perc.values

x,y = get_count(df['is_canceled'])

# plotting the percentage of booking using a pyplot.barplot
def plot_count(x_ax, y_ax, title, xlabel, ylabel, figsize=(5,7)):
  fig, ax = plt.subplots(figsize=figsize)
  ax.set_title(title, pad='2.0', fontsize=10)
  ax.set_xlabel(xlabel)
  ax.set_ylabel(ylabel)
  ax.yaxis.set_major_formatter(mtick.PercentFormatter())
  plot = sns.barplot(x, y, ax = ax, palette='hls')
  display = plt.show()
  return plot, display

plot_count(x_ax=x, y_ax=y, title='Percentage of cancelled and non cancelled bookings', xlabel='(0 = Booked, 1 = Cancelled)', ylabel='Bookings in %')

"""# **Conclusion:** Based on the above data we can conclude that, there are about 63% of non-cancelled bookings and 37% of cancelled bookings.

# **Question 4:** What is the Hotel price per stay over a year?
"""

# categorizing the nominal variable 'hotel' into two types based on their categorical values and bookings
resort_df = df[(df['hotel'] == 'Resort Hotel') & (df['is_canceled'] == 0)]
city_df = df[(df['hotel'] == 'City Hotel') & (df['is_canceled'] == 0)]

# grouping resort hotel data and city hotel data with 'arrival_date_month' and 'adr'(average daily rate)
r_hotel_data = resort_df.groupby(['arrival_date_month'])['adr'].mean().sort_values(ascending=False).reset_index()
c_hotel_data = city_df.groupby(['arrival_date_month'])['adr'].mean().sort_values(ascending=False).reset_index()

r_hotel_data

c_hotel_data

# merging the continous variable 'adr' of both the hotel data with 'arrival_date_month'
final_hotel_df = pd.merge(c_hotel_data, r_hotel_data, on='arrival_date_month')
final_hotel_df.rename(columns={'arrival_date_month':'Month', 'adr_x':'City Hotel', 'adr_y':'Resort Hotel'}, inplace=True)
final_hotel_df

# sorting the 'Month' variable in a sequential order 
def sort_month(df, col_name):
  return sd.Sort_Dataframeby_Month(df, col_name)

final_rates = sort_month(final_hotel_df, 'Month')
final_rates

# plotting the rate of hotels per night over a year using plotly.linechart
px.line(final_rates, title = 'Hotel Rates per Stay over a Year', x = 'Month', y = ['City Hotel', 'Resort Hotel'], hover_name = 'Month', template = 'plotly_white' )

"""# **Conclusion:** Based on the above data we can conclude that, the Hotel rates for Resort hotel had an exponential growth in Summer season (May-August) but in Autumn season (September-November) the hotel rates took a massive dip. Similarly, the Hotel rates for City hotel had a decent growth in Spring season (March-May) but in Autumn season (September-November) the hotel rates slightly went down.

# **Question 5:** What are the Hotel rates paid by customers per night based on different room types?
"""

# obtaining all the booked hotels
booked_df = df[(df['is_canceled'] == 0)]

# plotting the hotel rates paid by customers by considring data with respect to 'adr'(average daily rates) and 'reserved_room_type' because each room type has different rates using plotly.box
px.box(booked_df, template = 'seaborn', x = 'reserved_room_type', y = 'adr', width = 1000, height = 500, color='hotel', title='Hotel rates paid by customers per night based on different room types')

"""# **Conclusion:** Based on the above data we can conclude that, the highest rates for a hotel room in both City hotel and Resort hotel are of Type: A, apart from this the rates of Resort hotels and City hotels per night paid by the customers are almost arguable because these rates are not fixed and hence they vary with respect to the room types and various luxeries that comes with it. 
# Based on above data, Below is a price range for various room types in both  Resort hotels and City hotels:



# 1. Resort Hotels

*   **Type A:**  Max - 508, Min - 0
*   **Type B:**  Max - 134, Min - 70
*   **Type C:**  Max - 137, Min - 0  
*   **Type D:**  Max - 350.75 , Min - 0  
*   **Type E:**  Max - 349.67, Min - 0
*   **Type F:**  Max - 368.1, Min - 0
*   **Type G:**  Max - 426.25, Min - 0
*   **Type H:**  Max - 402, Min - 0
*   **Type L:**  Max - 200, Min - 82



# 2. City Hotels

*   **Type A:**  Max - 510, Min - 0
*   **Type B:**  Max - 263, Min - 70
*   **Type C:**  Max - 130, Min - 0  
*   **Type D:**  Max - 375.5 , Min - 0  
*   **Type E:**  Max - 275, Min - 0
*   **Type F:**  Max - 349.63, Min - 0
*   **Type G:**  Max - 372.33, Min - 0
*   **Type H:**  NA
*   **Type L:**  NA

# **Question 6:** How long do people stay in the hotel rooms?
"""

# obtaining all the stayed hotels
stay_period = df[(df['is_canceled']) == 0]

# summing both the columns 'stays_in_week_nights' and 'stays_in_weekend_nights' to get total nights
stay_period['total nights'] = stay_period['stays_in_week_nights'] + stay_period['stays_in_weekend_nights']

# grouping the total no. of nights and hotel type with the aggregate of count to get the number of stays
stay_df = stay_period.groupby(['total nights','hotel']).agg('count').reset_index()
stay_df = stay_df.loc[:, ['total nights', 'hotel', 'is_canceled']].sort_values(by='is_canceled', ascending=False)
stay_df.rename(columns={'total nights':'Total Nights', 'hotel':'Hotel', 'is_canceled':'Number of Stays'}, inplace=True)
stay_df

# plotting the total number of stays using plotly.barplot
map = px.bar(stay_df, x='Total Nights', y='Number of Stays', color=stay_df['Hotel'], hover_name=stay_df['Number of Stays'], labels={'Number of Stays':'Total Stays'}, barmode='group', title='Total number of Stays')
map.show()

"""# **Conclusion:** Based on the above data we can conclude that, Maximum number of stays are from City Hotels: 3 nights - (Stay Count: 11895), 2 nights - (Stay Count: 10992), 1 night - (Stay Count: 9169), followed by Resort hotels: 1 night - (Stay Count: 6580). It is noticeable that the type of hotels preferred by people for one day to three days stay are mostly City Hotels.

# **Question 7:** Which is the most booked type of accomodation?
"""

# obtaining all the active accomodations
accom_df = df[(df['is_canceled']) == 0]

# creating 3 different variables for 3 different types of accomodations 
single = accom_df[(accom_df['adults'] == 1) & (accom_df['children'] == 0) & (accom_df['babies'] == 0)]
couple = accom_df[(accom_df['adults'] == 2) & (accom_df['children'] == 0) & (accom_df['babies'] == 0)]
family = accom_df[(accom_df['adults'] >= 2) & (accom_df['children'] >= 0) & (accom_df['babies'] >= 0)]

# creating a list of acommodation types, their counts and their count percentages where 'accom_types' will be x and 'accom_percentile' will be y
accom_types = ['Single', 'Couple', 'Family']
accom_counts = [single.shape[0], couple.shape[0], family.shape[0]]
accom_percentile = [round((i / accom_df.shape[0]) * 100,2) for i in accom_counts]

# creating new df 'accom_final' and storing 'accom_types', 'accom_percentile' in it
accom_zipped = zip(accom_types, accom_percentile)
accom_final = pd.DataFrame(accom_zipped, columns=['Accomodation Type', 'Accomodation in (%)'])
accom_final.sort_values(by='Accomodation in (%)', ascending=False)

# plotting the most booked type of accomodation using plotly.barplot
map = px.bar(accom_final, template='plotly_dark', title='The most booked accomodation type', x='Accomodation Type', y='Accomodation in (%)', width=700, color='Accomodation in (%)', labels={'Accomodation Type':'Accomodation Types', 'Accomodation in (%)':'Accomodation in (%)'}) 
map.show()

"""# **Conclusion:** Based on the above data we can conclude that, Out of the three Accomodations, most preferred Accomodation type by customers is Family type (77.85 %), followed by Couple type (65.37 %) and lastly Single type (21.32 %).

# **Question 8:** Which mode of booking is most frequently used by customers?
"""

# obtaining all the booking modes 
booking_mode_df = df[(df['is_canceled'] == 0)]

# creating 7 different variables for 7 different types of Booking modes 
Online_TA = booking_mode_df[(booking_mode_df['market_segment'] == 'Online TA')]
Offline_TO = booking_mode_df[(booking_mode_df['market_segment'] == 'Offline TA/TO')]
Direct = booking_mode_df[(booking_mode_df['market_segment'] == 'Direct')]
Groups = booking_mode_df[(booking_mode_df['market_segment'] == 'Groups')]
Corporate = booking_mode_df[(booking_mode_df['market_segment'] == 'Corporate')]
Complementary = booking_mode_df[(booking_mode_df['market_segment'] == 'Complementary')]
Aviation = booking_mode_df[(booking_mode_df['market_segment'] == 'Aviation')]

# creating a list of Booking modes, their counts and their count percentages where 'b_mode_percentile' will be x and 'b_mode_types' will be y
b_mode_types = ['Online', 'Offline', 'Direct', 'Groups', 'Corporate', 'Complementary', 'Aviation']
b_mode_counts = [Online_TA.shape[0], Offline_TO.shape[0], Direct.shape[0], Groups.shape[0], Corporate.shape[0], Complementary.shape[0], Aviation.shape[0]]
b_mode_percentile = [round((i / booking_mode_df.shape[0]) * 100, 2) for i in b_mode_counts]

# creating new df 'b_mode_final' and storing 'b_mode_types', 'b_mode_percentile' in it
b_mode_zipped = zip(b_mode_types, b_mode_percentile)
b_mode_final = pd.DataFrame(b_mode_zipped, columns=['Booking Modes', 'Booking Mode (%)'])
b_mode_final.sort_values(by='Booking Mode (%)', ascending=False)

# plotting the most frequently used booking mode using plotly.funnel
map = px.funnel(b_mode_final, title='Mode of Booking most frequently used', x='Booking Modes', y='Booking Mode (%)', color='Booking Modes', hover_name='Booking Mode (%)', template='plotly_dark') 
map.show()

"""# **Conclusion:** Based on the above data we can conclude that, The most frequently used mode for Booking is Online mode (47.55 %), followed by Offline Mode (21.16 %).

# **Question 9:** Which Meal type is most preferred & booked by customers?
"""

# obtaining all the active Meal types
meal_type_df = df[(df['is_canceled'] == 0)]

# creating 5 different variables for 5 different types of Booking modes 
BB = meal_type_df[(meal_type_df['meal'] == 'BB')]
HB = meal_type_df[(meal_type_df['meal'] == 'HB')]
SC = meal_type_df[(meal_type_df['meal'] == 'SC')]
Undefined = meal_type_df[(meal_type_df['meal'] == 'Undefined')]
FB = meal_type_df[(meal_type_df['meal'] == 'FB')]

# creating a list of meal types, their counts and their count percentages where 'meal_types' will be x and 'meal_percentile' will be y
meal_types = ['Bfast & Bed', 'Bfast & Dinn', 'Bfast lun & dinn', 'Self', 'Undefined']
meal_counts = [BB.shape[0], HB.shape[0], SC.shape[0], Undefined.shape[0], FB.shape[0]]
meal_percentile = [round((i / meal_type_df.shape[0]) * 100,2) for i in meal_counts]

# creating new df 'meal_type_final' and storing 'meal_types', 'meal_percentile' in it
meal_type_zipped = zip(meal_types, meal_percentile)
meal_type_final = pd.DataFrame(meal_type_zipped, columns=['Meal Types', 'Meal Order in (%)'])
meal_type_final.sort_values(by='Meal Order in (%)', ascending=False)

# plotting the most preferred and booked meal type by customers using plotly.pie
map = px.pie(meal_type_final, title='Most preferred & booked Meal type', names='Meal Types', values='Meal Order in (%)', color_discrete_sequence=px.colors.sequential.RdBu, hole = 0.19, hover_name='Meal Order in (%)', template='plotly') 
map.show()

"""# **Conclusion:** Based on the above data we can conclude that, The most preferred & booked Meal type is Breakfast & Bed (Meal Type Count: 76.9 %), followed by Breakfast & Dinner (Meal Type Count: 12.6 %).

# **Question 10:** What is the Reservation status?
"""

# obtaining all the active Reservations
reserv_stat_df = df[(df['reservation_status'] == 'Check-Out') + (df['reservation_status'] == 'Canceled') + (df['reservation_status'] == 'No-Show')]

# creating 3 different variables for 3 different types of reservation status 
Checkout = reserv_stat_df[(reserv_stat_df['reservation_status'] == 'Check-Out')]
Canceled = reserv_stat_df[(reserv_stat_df['reservation_status'] == 'Canceled')]
Noshow = reserv_stat_df[(reserv_stat_df['reservation_status'] == 'No-Show')]

# creating a list of reservation types, their counts and their count percentages where 'rsrv_types' will be x and 'reserv_percentile' will be y
rsrv_types = ['Check-Out', 'Canceled', 'No-Show']
rsrv_counts = [Checkout.shape[0], Canceled.shape[0], Noshow.shape[0]]
rsrv_percentile = [round((i / reserv_stat_df.shape[0]) * 100,2) for i in rsrv_counts]

# creating new df 'rsrv_type_final' and storing 'rsrv_types', 'rsrv_percentile' in it
rsrv_type_zipped = zip(rsrv_types, rsrv_percentile)
rsrv_type_final = pd.DataFrame(rsrv_type_zipped, columns=['Reservation Status', 'Reservation Status in (%)'])
rsrv_type_final.sort_values(by='Reservation Status in (%)', ascending=False)

# plotting the reservation status using plotly.histogram
map = px.histogram(rsrv_type_final, title='Reservation Status', x='Reservation Status', y='Reservation Status in (%)', barmode='relative', color='Reservation Status', color_discrete_sequence=px.colors.sequential.Rainbow_r, template='plotly_dark') 
map.show()

"""# **Conclusion:** Based on the above data we can conclude that, 62.96 % of customers Checked-Out whereas 36.03 % of customers Canceled the Booking and 1.01 % of customers didn't show up.

# **Overall Summary:**

* **There are about 63% of confirmed bookings & 37% of cancelled bookings.**
* **For 1-3 days, majority of people prefer City Hotels and for 4-7 days, majority of people prefer Resort Hotels.**
* **The Highest Rates for a hotel room in both City & Resort hotels is for Room Type A.**
* **Hotel rates for Resort hotels are at peak in Summer season (May-August) but in Autumn season (September-November) the rates become cheaper.**
* **Hotel rates for City hotels have a decent growth in Spring season (March-May) but in Autumn season (September-November) the hotel rates slightly fell down.**
* **47.56 % of customers prefer Online mode for hotel booking & 21.17 % of customers prefer Offline mode.**
* **76.96 % of customers prefer Breakfast & Bed & 12.6 % of customers prefer Breakfast & Dinner as the Meal Type while Booking hotels.**
* **77.85 % of customers prefer Family Type of Accomodation & 65.51 % of customers prefer Couple Type of Accomodation.**
* **62.92 % of customers Checked-Out, 36.06 % of customers Cancelled the Booking & 1.10 % of customers didn’t show up.**
* **Countries with the most number of Guests are Portugal (Guest Count: 20977) followed by Great Britain (Guest Count: 9668) and France (Guest Count: 8468).**
* **87.6 % of customers prefer No – deposit while booking hotel rooms.**
* **66.4 % of customers prefer City hotels & 33.5 % of customers prefer Resort hotels.**
"""